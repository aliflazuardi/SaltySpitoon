// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, password_hash) VALUES ($1, $2)
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.PasswordHash)
	return err
}

const selectProfileById = `-- name: SelectProfileById :one
SELECT preference, weight_unit as weightUnit, height_unit as heightUnit, weight, height, email, name, image_uri as imageUri FROM users where id = $1
`

type SelectProfileByIdRow struct {
	Preference sql.NullString
	Weightunit sql.NullString
	Heightunit sql.NullString
	Weight     sql.NullString
	Height     sql.NullString
	Email      string
	Name       sql.NullString
	Imageuri   sql.NullString
}

func (q *Queries) SelectProfileById(ctx context.Context, id int64) (SelectProfileByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectProfileById, id)
	var i SelectProfileByIdRow
	err := row.Scan(
		&i.Preference,
		&i.Weightunit,
		&i.Heightunit,
		&i.Weight,
		&i.Height,
		&i.Email,
		&i.Name,
		&i.Imageuri,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, password_hash FROM users where email = $1
`

type SelectUserByEmailRow struct {
	ID           int64
	PasswordHash string
}

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (SelectUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i SelectUserByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}
