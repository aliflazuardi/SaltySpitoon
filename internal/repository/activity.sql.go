// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: activity.sql

package repository

import (
	"context"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    user_id, activity_type, done_at, duration_minutes, calories_burned, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, NOW(), NOW()
)
RETURNING id, user_id, activity_type, done_at, duration_minutes, calories_burned, created_at, updated_at
`

type CreateActivityParams struct {
	UserID          int64
	ActivityType    string
	DoneAt          time.Time
	DurationMinutes int32
	CaloriesBurned  int32
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.UserID,
		arg.ActivityType,
		arg.DoneAt,
		arg.DurationMinutes,
		arg.CaloriesBurned,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityType,
		&i.DoneAt,
		&i.DurationMinutes,
		&i.CaloriesBurned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :execrows
DELETE FROM activities WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteActivity, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
