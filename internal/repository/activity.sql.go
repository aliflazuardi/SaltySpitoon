// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    user_id, activity_type, done_at, duration_minutes, calories_burned, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, NOW(), NOW()
)
RETURNING id, user_id, activity_type, done_at, duration_minutes, calories_burned, created_at, updated_at
`

type CreateActivityParams struct {
	UserID          int64
	ActivityType    string
	DoneAt          time.Time
	DurationMinutes int32
	CaloriesBurned  int32
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.UserID,
		arg.ActivityType,
		arg.DoneAt,
		arg.DurationMinutes,
		arg.CaloriesBurned,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityType,
		&i.DoneAt,
		&i.DurationMinutes,
		&i.CaloriesBurned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :execrows
DELETE FROM activities WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteActivity, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPaginatedActivity = `-- name: GetPaginatedActivity :many
SELECT id, activity_type, done_at, duration_minutes, calories_burned, created_at
FROM activities
WHERE user_id = $1
  AND (COALESCE($2::text, '') = '' OR activity_type = $2::text)
  AND (COALESCE($3::timestamptz, '1900-01-01'::timestamptz) = '1900-01-01'::timestamptz OR done_at >= $3::timestamptz)
  AND (COALESCE($4::timestamptz, '2100-01-01'::timestamptz) = '2100-01-01'::timestamptz OR done_at <= $4::timestamptz)
  AND (COALESCE($5::integer, -1) = -1 OR calories_burned >= $5::integer)
  AND (COALESCE($6::integer, -1) = -1 OR calories_burned <= $6::integer)
LIMIT $7 OFFSET $8
`

type GetPaginatedActivityParams struct {
	UserID  int64
	Column2 string
	Column3 time.Time
	Column4 time.Time
	Column5 int32
	Column6 int32
	Limit   int32
	Offset  int32
}

type GetPaginatedActivityRow struct {
	ID              int64
	ActivityType    string
	DoneAt          time.Time
	DurationMinutes int32
	CaloriesBurned  int32
	CreatedAt       sql.NullTime
}

func (q *Queries) GetPaginatedActivity(ctx context.Context, arg GetPaginatedActivityParams) ([]GetPaginatedActivityRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedActivity,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedActivityRow
	for rows.Next() {
		var i GetPaginatedActivityRow
		if err := rows.Scan(
			&i.ID,
			&i.ActivityType,
			&i.DoneAt,
			&i.DurationMinutes,
			&i.CaloriesBurned,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchActivity = `-- name: PatchActivity :one
UPDATE activities
SET
    activity_type = COALESCE($1, activity_type),
    done_at = COALESCE($2, done_at),
    duration_minutes = COALESCE($3, duration_minutes),
    calories_burned = COALESCE($4, calories_burned),
    updated_at = now()
WHERE id = $5
RETURNING id, activity_type, done_at, duration_minutes, calories_burned, created_at, updated_at
`

type PatchActivityParams struct {
	ActivityType    sql.NullString
	DoneAt          sql.NullTime
	DurationMinutes sql.NullInt32
	CaloriesBurned  sql.NullInt32
	ID              int64
}

type PatchActivityRow struct {
	ID              int64
	ActivityType    string
	DoneAt          time.Time
	DurationMinutes int32
	CaloriesBurned  int32
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) PatchActivity(ctx context.Context, arg PatchActivityParams) (PatchActivityRow, error) {
	row := q.db.QueryRowContext(ctx, patchActivity,
		arg.ActivityType,
		arg.DoneAt,
		arg.DurationMinutes,
		arg.CaloriesBurned,
		arg.ID,
	)
	var i PatchActivityRow
	err := row.Scan(
		&i.ID,
		&i.ActivityType,
		&i.DoneAt,
		&i.DurationMinutes,
		&i.CaloriesBurned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
